package com.djues3.names_are_hard.errors

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNull

class KotlinErrorParserTest {


    /**
     * Test that the error location is parsed correctly from a `kotlinc` compile error.
     *
     * The test case is generated by running the script below in the app and copying the output.
     * ```kotlin
     * val msg = "Hello world!"
     * println(msg
     * ```
     */
    @Test
    fun `test that error location is parsed correctly`() {
        val parser = KotlinErrorParser
        var errorLine = "/tmp/script_3429566310633152166.kts:2:12: error: expecting ')'"
        val expected = ErrorLocation(2, 12,  36..39)
        var actual = parser.parse(errorLine)
        assertEquals(expected, actual)

        errorLine = "println(msg"
        actual = parser.parse(errorLine)
        assertNull(actual)

        errorLine = "           ^"
        actual = parser.parse(errorLine)
        assertNull(actual)
    }

    /**
    * Since both `kotlinc` compile errors and runtime exceptions are printed to stderr,
    * we need to test that the parser doesn't match runtime exceptions.
    *
    * The test case is generated by running the script below in the app.
    * ```kotlin
    * throw RuntimeException("Hello world!")
    * ```
    * */
    @Test
    fun `test that runtime exceptions are not parsed`() {
        val parser = KotlinErrorParser
        var errorLine = "java.lang.RuntimeException: Hello world!"
        var actual = parser.parse(errorLine)
        assertNull(actual)
        errorLine = "\tat Script_5433711966194519445.<init>(script_5433711966194519445.kts:3)"
        actual = parser.parse(errorLine)
        assertNull(actual)
    }
}